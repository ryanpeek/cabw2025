{
  "hash": "d91bd14d38b39213c82f2d07cf43d715",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Make Maps\nengine: knitr\nformat: live-html\nwebr:\n  render-df: gt-interactive\n  packages:\n    - dplyr\n    - ggplot2\n    - sf\n    - mapview\n    - tigris\n  cell-options:\n    editor-font-scale: 0.8\n    fig-width: 7\n    fig-height: 4.3\n    out-width: \"100%\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n::: {.cell}\n\n:::\n\n\n\n## Load Libraries\n\nWe will use the following in this tutorial:\n\n```\nlibrary(dplyr)\nlibrary(sf)\nlibrary(mapview)\nlibrary(tigris)\nlibrary(ggplot2)\n```\n\n\n\n## Import the Data\n\n\n\n::: {.cell}\n```{webr}\n# Benthic Macroinvertebrate Data\ncsci_url <- \"https://raw.githubusercontent.com/ryanpeek/cabw2025/refs/heads/main/data/cscidat.csv\"\ncscidat <- read.csv(csci_url)\n\n# Algae Data\nasci_url <- \"https://raw.githubusercontent.com/ryanpeek/cabw2025/refs/heads/main/data/ascidat.csv\"\nascidat <- read.csv(asci_url)\n\n# Site Location Data\nlatlons <- read.csv(file =  \"https://raw.githubusercontent.com/ryanpeek/cabw2025/refs/heads/main/data/latlon.csv\")\nglimpse(latlons)\n\n```\n:::\n\n\n\n## Make Data Spatial\n\n### Projections/Transformations\n\nSpatial data is tricky, because different parts of the world work in different “datum” or “projections”. The best description of how these work is thinking about draping a square tablecloth over a round ball (earth). The tablecloth isn’t quite big enough to cover the whole globe, so near the edges of the tablecoth there’s stretching. At the center of the tablecloth there’s very little stretching. When working with spatial data, we want a projection that is going to give us the least amount of stretching for the location/region we’re working in. \n\nA few common projections used in California for state/federal work:\n\n - [NAD83 California Albers: EPSG 3310](https://epsg.io/3310)\n - [NAD83 California Teal Albers Equal Area: EPSG 102600](https://epsg.io/102600)\n - [WGS84 Lat Lon: EPSG 4326](https://epsg.io/4326)\n \n\n### Convert to [`{sf}`](https://r-spatial.github.io/sf/)\n\nTo leverage all the spatial power R provides, we will use the `{sf}` package, which provides a full suite of functionality for spatial analysis of **vector** data. We need to use `st_as_sf()` to convert our dataframe to a simple feature (spatial) object. As part of that we need to specify the coordinate reference system (`crs=`) and `coords` columns.\n\nIf all goes well, we should end up with a new `geometry` column, which contains our projected spatial data in a single column. This applies to point, line, or polygon data, there will always be **one** `geometry` column with the spatial information. And it will *stick* with the data!\n\n\n::: {.cell}\n```{webr}\n# make sf\nxy_sf <- latlons |> \n  st_as_sf(\n    coords=c(\"New_Long\", \"New_Lat\"), # coordinate columns\n    crs=4326, # the coordinate ref system\n    remove=FALSE) # don't remove the original lat/lon columns\n\n# look at the object\nhead(xy_sf)\n\n```\n:::\n\n\n\n::: {.callout-tip}\n## 📣 Raster Data\n\nWe simply don't have time to cover all the things, but if you work with raster data, the best recommended all-in-one package to use is [`{terra}`](https://rspatial.github.io/terra/).\n\n:::\n\n## Simple Map\n\nWe can start by using the `plot()` function. Here we are actually using a modified `plot()` function from the `{sf}` package, to handle the spatial data.\n\n\n::: {.cell autorun='false'}\n```{webr}\n#| autorun: false\n#| label: \"First Plot\"\nplot(xy_sf$geometry)\n```\n:::\n\n\n\n## Interactive Maps\n\nAnother amazing tool to add to the repertoire is the `{mapview}` package. It's very easy to use, and is a great option for exploring your data.\n\n\n::: {.cell}\n```{webr}\nmapview(xy_sf)\n\n# hint, try with the argument zcol=\"NAME\"\n```\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}