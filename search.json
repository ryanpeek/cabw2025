[
  {
    "objectID": "slides_getting_started.html#section",
    "href": "slides_getting_started.html#section",
    "title": "Getting Started with R in Environmental Science",
    "section": "",
    "text": "Workshop Intro"
  },
  {
    "objectID": "slides_getting_started.html#logistics",
    "href": "slides_getting_started.html#logistics",
    "title": "Getting Started with R in Environmental Science",
    "section": "Logistics",
    "text": "Logistics\n\nüõú WiFi credentials:\n\nNetwork: Fill Here\nPassword: unknown\nImportant locations:\n\nBathrooms: fill in"
  },
  {
    "objectID": "slides_getting_started.html#code-of-conduct",
    "href": "slides_getting_started.html#code-of-conduct",
    "title": "Getting Started with R in Environmental Science",
    "section": "Code of Conduct",
    "text": "Code of Conduct\n\nEveryone who comes to learn should feel welcome here. We are committed to providing a professional, friendly and safe environment for all participants regardless of gender, sexual orientation, disability, race, ethnicity, religion, national origin or other protected class.\nPlease see a full code of conduct here:\n\n\nhttps://d-rug.github.io/code-of-conduct.html"
  },
  {
    "objectID": "slides_getting_started.html#meet-the-team",
    "href": "slides_getting_started.html#meet-the-team",
    "title": "Getting Started with R in Environmental Science",
    "section": "Meet the Team!",
    "text": "Meet the Team!\n\n\n\nRyan Peek\nSenior Env. Scientist @ CDFW\n\n\nElena Suglia\nEnvironmental Scientist @ California State Water Resources Control Board"
  },
  {
    "objectID": "slides_getting_started.html#meet-your-neighbors",
    "href": "slides_getting_started.html#meet-your-neighbors",
    "title": "Getting Started with R in Environmental Science",
    "section": "Meet your Neighbors!",
    "text": "Meet your Neighbors!\n\n\n\n\nPlease share with the person next to / nearby you‚Ä¶\n\nYour name\nYour professional affiliation and/or where you‚Äôre from\nWhat you hope to get out of this workshop\n\n\n  \n    ‚àí\n    +\n \n 03:00"
  },
  {
    "objectID": "slides_getting_started.html#workshop-materials",
    "href": "slides_getting_started.html#workshop-materials",
    "title": "Getting Started with R in Environmental Science",
    "section": "Workshop materials",
    "text": "Workshop materials\n\nOne link for all materials\nüîó pos.it/quarto-dashboards-24"
  },
  {
    "objectID": "slides_getting_started.html#and-theyre-all-made-with",
    "href": "slides_getting_started.html#and-theyre-all-made-with",
    "title": "Getting Started with R in Environmental Science",
    "section": "‚Ä¶ and they‚Äôre all made with?",
    "text": "‚Ä¶ and they‚Äôre all made with?\n\nQuarto!"
  },
  {
    "objectID": "slides_getting_started.html#agenda",
    "href": "slides_getting_started.html#agenda",
    "title": "Getting Started with R in Environmental Science",
    "section": "Agenda",
    "text": "Agenda\n\n\n\n\n\n\n\nTime\nActivity\n\n\n\n\n1:00 - 1:50\nWorkshop Introduction  Data Wrangling & Project Workflow\n\n\n~1:50 - 2:00\nTake a break ‚òï\n\n\n2:00 - 2:50\nAdventures with Bioassessment Data (Exploratory analysis)\n\n\n~2:50 - 3:00\nBrain break üß†\n\n\n3:00 - 3:50\nMake a Map! üó∫Ô∏è\n\n\n~3:50 - 4:00\nCoffee break ‚òï\n\n\n4:00 - 4:30\nTying it Together ü™¢"
  },
  {
    "objectID": "slides_getting_started.html#the-sticky-situation",
    "href": "slides_getting_started.html#the-sticky-situation",
    "title": "Getting Started with R in Environmental Science",
    "section": "The Sticky Situation",
    "text": "The Sticky Situation\n\n\n\n\n\n‚ÄúI‚Äôm lost / need help‚Äù\n\n\n\n\n‚ÄúI‚Äôm done and ready to move along‚Äù\nüë®‚Äçüíª Put your sticky note on the back of your laptop screen üë©‚Äçüíª"
  },
  {
    "objectID": "slides_getting_started.html#meeting-you-where-you-are",
    "href": "slides_getting_started.html#meeting-you-where-you-are",
    "title": "Getting Started with R in Environmental Science",
    "section": "Meeting you where you are",
    "text": "Meeting you where you are\n\n\n\nI‚Äôll assume you\n\nhave limited or no R knowlege\nhave worked in Microsoft/Google Spreadsheets\nhave written a report on something\nwant to learn!\n\n\n\n\nI‚Äôll teach you\n\nbasics of a using R\nhow to get unstuck\na framework of tools you can reuse!"
  },
  {
    "objectID": "slides_getting_started.html#workshop-approach",
    "href": "slides_getting_started.html#workshop-approach",
    "title": "Getting Started with R in Environmental Science",
    "section": "Workshop approach",
    "text": "Workshop approach\nWe will use real bioassessment data to demonstrate some general data approaches to using open and reproducible workflows in R to summarizing and plotting data!.\n\n\n Conventions\n\n\n\n\n\n\n\n\nüß∞\nAdd this to your toolbox.\n\n\nüì£\nImportant announcement typically learned via trial and error‚Ä¶let us save you the pain\n\n\n\nDetour warning. There‚Äôs a lot more to talk about here but, but there‚Äôs not time today."
  },
  {
    "objectID": "slides_getting_started.html#asking-questions",
    "href": "slides_getting_started.html#asking-questions",
    "title": "Getting Started with R in Environmental Science",
    "section": "Asking Questions",
    "text": "Asking Questions\n\n\n\n\nYou are always welcome to raise your hand! üôã\n\n\n\n\n\n\nAlso feel free to ask in our shared doc!"
  },
  {
    "objectID": "slides_getting_started.html#getting-help-r-functions",
    "href": "slides_getting_started.html#getting-help-r-functions",
    "title": "Getting Started with R in Environmental Science",
    "section": "Getting help (R Functions)",
    "text": "Getting help (R Functions)\nFunctions are the üçû and üßà of R programming!\n\n\nIf you want to access any function‚Äôs help page:\n# Method 1\nhelp(function_name_here)\n\n# Method 2\n?function_name_here\n\n# Method 3\n# Highlight the function and press F1 ü§Ø"
  },
  {
    "objectID": "slides_getting_started.html#lets-get-muddy",
    "href": "slides_getting_started.html#lets-get-muddy",
    "title": "Getting Started with R in Environmental Science",
    "section": "Let‚Äôs get muddy!",
    "text": "Let‚Äôs get muddy!"
  },
  {
    "objectID": "getting_started.html",
    "href": "getting_started.html",
    "title": "Getting Started",
    "section": "",
    "text": "Ideally folks will have a chance to run through this prior to the workshop. It is one of the hurdles to getting going, but it gets easier!",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting_started.html#software",
    "href": "getting_started.html#software",
    "title": "Getting Started",
    "section": "Software",
    "text": "Software\nThe software that we will need is as follows. We recommend installing in this order as well. More detailed instructions can be found at each site, and here, (follow Steps 1 & 2).\n\nR\n\nR\nRStudio\nQuarto\n\n\n\nPackages\nThe next step is to install a few packages, which are libraries of functions (more on these later) that we can use to do different things. We install packages available for all R users from an online repository called CRAN, by pasting the following code into the RStudio Console window and hitting ENTER.\nFor our purposes we will be using a few packages, let‚Äôs try to install them now.\n\n# we make a concatenated list of packages\npkg_list &lt;- c(\n  \"tidyverse\", \"janitor\", \"here\", \"sf\", \"tigris\"\n)\n# then install each package in the list\ninstall.packages(pkg_list)",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "getting_started.html#getting-started",
    "href": "getting_started.html#getting-started",
    "title": "Getting Started",
    "section": "Getting Started!",
    "text": "Getting Started!\nView slides in full screen",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "4-tying-it-together/index.html",
    "href": "4-tying-it-together/index.html",
    "title": "Tying it Together!",
    "section": "",
    "text": "View slides in full screen",
    "crumbs": [
      "Modules",
      "Tying it Together!"
    ]
  },
  {
    "objectID": "4-tying-it-together/index.html#slides",
    "href": "4-tying-it-together/index.html#slides",
    "title": "Tying it Together!",
    "section": "",
    "text": "View slides in full screen",
    "crumbs": [
      "Modules",
      "Tying it Together!"
    ]
  },
  {
    "objectID": "4-tying-it-together/index.html#exercises",
    "href": "4-tying-it-together/index.html#exercises",
    "title": "Tying it Together!",
    "section": "Exercises",
    "text": "Exercises\n\nR:\n\nOption 1: TBD\nOption 2: TBD",
    "crumbs": [
      "Modules",
      "Tying it Together!"
    ]
  },
  {
    "objectID": "1-data-wrangling/index.html",
    "href": "1-data-wrangling/index.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "There are many ways to learn R, but one of the best ways is to jump right in with some data you can get your hands dirty with. R is an amazing tool, and often there are many ways to do the same thing, however we always need to start with data!\n\n\nThe data set we are using is a subset of the California Stream Condition Index (CSCI) and the Algal Stream Condition Index (ASCI). These data represent a portion of the sampling sites that were used to develop each index. The CSCI is based on the comparison of the observed assemblage of benthic macroinvertebrate species to those expected from studying reference streams. It provides a scientifically robust way of assessing and describing conditions and tracking conditions over time or in response to regulatory or restoration actions. Theses indices are built on a few main components:\n\nRatio of observed to expected taxanomic groups (OE)\nProportion of the assemblage that falls into different functional groups that represent species diversity, ecosystem function, and sensitivity to stress.\n\n\n\n\n\n\nDrawing of a Caddisfly larvae (Trichoptera: Hydropsychidae), K. Mertz, 2015.\n\n\nThe CSCI value is not normalized to a 0 to 1 or 100 scale, but instead compares Index values at test sites to values at comparable reference sites. The mean Index value of reference sites is 1.01. The 90th percentile value is 0.85, thus:\n\nstreams with values &gt;0.85 are considered to be likely intact\nstreams with values between 0.72 and 0.85 are considered likely altered\nstreams with values &lt;0.72 are considered very likely altered\n\nFor more information about these data, and lots of great research showing the utility for monitoring, watershed health, and more, check out here, here, here and here.\n\n\n\nLet‚Äôs get some data to play with! To start, we‚Äôll use a URL of the data set we want to work with, and read it directly from the interwebs into R. It is a .csv, which means we can use a read.csv function, which is one of the functions that comes built in to R (often called base R).\n\n\n\n\n\n\nüì£ Interactive Code!\n\n\n\nThe code below is interactive, meaning you can type and change different things and then click Run Code each time to run R right in the browser. This will run all the code in the chunk. If you are following along in RStudio, run these commands in the Console.\n\n\n\n\n\n\n\n\n\n\nWe have data! What did we do? We used &lt;- assignment to save an object into our Environment. In RStudio, take a look at the Environment tab, when we save or assign a value, it should show up there!\n\n\n\n\nLet‚Äôs try to learn a little more about the kind of data we have. We know it came from a .csv, but in R (and programming generally), there are some specific types and forms of data that we should be aware of. We can use a few more functions here, str() for structure, and head() for the first few rows.\n\n\n\n\n\n\n\n\nThere are a bewildering number of formats for storing data and R is no exception. Understanding the basic building blocks that make up data types is essential. All functions in R require specific types of input data and the key to using functions is knowing how these types relate to each other. We‚Äôre going talk about a few of the most common.\n\n\nThe basic data format in R is a vector - a one-dimensional grouping of elements that have the same data type. These are all vectors and they are created with the c() function:\n\n\n\n\n\n\n\n\nThe four types of atomic vectors (think atoms that make up a molecule aka vector) are double (or numeric), integer, logical, and character. Each type has some useful properties and each helps define limits or constraints on the data. Basically, functions in R require a specific types of data, and won‚Äôt work without them.\n\n\n\n\n\n\nüì£ Common errors\n\n\n\nPlay around with these because beyond typing errors, one of the most common issues is data that is of the wrong structure or type. Get to know the basic building blocks!\n\n\n\n\n\nWe are likely familiar with a spreadsheet‚Ä¶which is a type of two-dimensional data. In R, the cool thing is that a collection of vectors is a data frame, which keeps columns as vectors of the same type of data. Just as in a spreadsheet, a column describes a variable and rows link observations between columns.\nLet‚Äôs look at our cscidat again.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüì£ Data frame constraints\n\n\n\nIn R, the only constraints required to make a data frame are:\n\nEach column contains the same type of data\nThe number of observations in each column is equal.\n\nThese are good practices to use in spreadsheets too!\n\n\n\n\n\n\nThe base install of R is quite powerful, but the universe of R programming is an amazing place, and there are are many thousands of packages available that provide functions we can use for all kinds of things. This diversity and flexibility is what makes R awesome (and sometimes frustrating!). Packages are the spellbooks we can download and install for use. There is so much to say about packages regarding finding them, using them, etc., but for now let‚Äôs focus just on the basics.\n\nCRAN: One of the reasons for R‚Äôs popularity is CRAN, The Comprehensive R Archive Network. This is where you download R and also where most will gain access to packages (there are other places, but that is for later). Not much else to say about this now other than to be aware of it. As of Fall 2025, there are +22,800 packages on CRAN!\n\nWhen a package gets installed, that means the source code is downloaded and put into your local computer R library. A default library location is set for you, so let‚Äôs download some packages!\nTry this in RStudio on your own by running the following code in the Console:\n\n# install packages from CRAN\ninstall.packages(\"tidyverse\")\ninstall.packages(\"janitor\")\ninstall.packages(\"sf\")\n\nOnce our Console returns back to the &gt; symbol and there is no red stop sign in the upper right hand corner of Rstudio, let‚Äôs see if the installation worked. Try the following in your console:\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(janitor)\n\n\n\n\n\n\nüì£ Packages\n\n\n\nWe only need to install packages once per R version, but we need to load packages every session before we can use them with the library() function.\n\n\nIf everything worked, hopefully we‚Äôll see something like below. Don‚Äôt worry if the version numbers are slightly different, these can change depending on the operating system and version of R you are using.\n\n\n\n\n\n\n\n\n\n\nüì£ Important Note\n\n\n\nIf you only take one thing away from today, please make sure it is this: there are many, many options to get help from. Part of learning is sifting through, trying, failing, and trying again. Don‚Äôt be discouraged if something isn‚Äôt working, please reach out and leverage your R community!\n\n\nBeing able to find help and interpret that help is probably one of the most important skills for learning a new language. R is no different. Help on functions and packages can be accessed directly from R, can be found on CRAN and other official R resources, searched on Google, etc.\n\n\nGetting help from the console is straightforward and can be done numerous ways. Try some of the commands below and see what happens in RStudio. When you know the name of a function, use the console and type help(&lt;function&gt;) or ?&lt;function&gt;\n# Using the help command/shortcut\nhelp(\"print\") # Help on the print command\n?print # Help on the print command using the `?` shortcut\n\n# When you know the name of the package\nhelp(package = \"sf\") # Help on the package `dplyr`\n\n\n# Don't know the exact name or just part of it\napropos(\"print\") # Returns all available functions with \"print\" in the name\n\n??print # shortcut, but also searches demos and vignettes in a formatted page\n\nWhile the resources already mentioned are useful, often the quickest way is to just turn to Google (and now LLM).\nHowever, searching for ‚ÄúR‚Äù answers straight from Google can be challenging and still requires understanding what the question (or error) actually is. A few tips:\n\nWhen using search engines, always preface the search with ‚Äúr‚Äù or ‚Äú[R]‚Äù\nGet a sense of what sources are reliable\nTake note of the number of hits and date of a web page\nWhen in doubt, search with the exact error message (see here for details about warnings vs errors)\n\n\n\n\n\n\n\n Using LLMs\n\n\n\nUsing tools like ChatGPT can be helpful. Some models are better than others for R, but just a strong caution and general bit of advice.\nMake sure to understand each piece of code that you run when getting suggestions for code from LLMs. Sometimes it will be great, sometimes it will be very wrong, and many times it‚Äôs a combination of both.\nLearning to program requires repetition, both in success and in failure, and understanding why something breaks can be much more informative to learning than knowing something just works.",
    "crumbs": [
      "Modules",
      "Data Wrangling"
    ]
  },
  {
    "objectID": "1-data-wrangling/index.html#data-background",
    "href": "1-data-wrangling/index.html#data-background",
    "title": "Data Wrangling",
    "section": "",
    "text": "The data set we are using is a subset of the California Stream Condition Index (CSCI) and the Algal Stream Condition Index (ASCI). These data represent a portion of the sampling sites that were used to develop each index. The CSCI is based on the comparison of the observed assemblage of benthic macroinvertebrate species to those expected from studying reference streams. It provides a scientifically robust way of assessing and describing conditions and tracking conditions over time or in response to regulatory or restoration actions. Theses indices are built on a few main components:\n\nRatio of observed to expected taxanomic groups (OE)\nProportion of the assemblage that falls into different functional groups that represent species diversity, ecosystem function, and sensitivity to stress.\n\n\n\n\n\n\nDrawing of a Caddisfly larvae (Trichoptera: Hydropsychidae), K. Mertz, 2015.\n\n\nThe CSCI value is not normalized to a 0 to 1 or 100 scale, but instead compares Index values at test sites to values at comparable reference sites. The mean Index value of reference sites is 1.01. The 90th percentile value is 0.85, thus:\n\nstreams with values &gt;0.85 are considered to be likely intact\nstreams with values between 0.72 and 0.85 are considered likely altered\nstreams with values &lt;0.72 are considered very likely altered\n\nFor more information about these data, and lots of great research showing the utility for monitoring, watershed health, and more, check out here, here, here and here.",
    "crumbs": [
      "Modules",
      "Data Wrangling"
    ]
  },
  {
    "objectID": "1-data-wrangling/index.html#import-read-in-data",
    "href": "1-data-wrangling/index.html#import-read-in-data",
    "title": "Data Wrangling",
    "section": "",
    "text": "Let‚Äôs get some data to play with! To start, we‚Äôll use a URL of the data set we want to work with, and read it directly from the interwebs into R. It is a .csv, which means we can use a read.csv function, which is one of the functions that comes built in to R (often called base R).\n\n\n\n\n\n\nüì£ Interactive Code!\n\n\n\nThe code below is interactive, meaning you can type and change different things and then click Run Code each time to run R right in the browser. This will run all the code in the chunk. If you are following along in RStudio, run these commands in the Console.\n\n\n\n\n\n\n\n\n\n\nWe have data! What did we do? We used &lt;- assignment to save an object into our Environment. In RStudio, take a look at the Environment tab, when we save or assign a value, it should show up there!",
    "crumbs": [
      "Modules",
      "Data Wrangling"
    ]
  },
  {
    "objectID": "1-data-wrangling/index.html#data-structures-in-r",
    "href": "1-data-wrangling/index.html#data-structures-in-r",
    "title": "Data Wrangling",
    "section": "",
    "text": "Let‚Äôs try to learn a little more about the kind of data we have. We know it came from a .csv, but in R (and programming generally), there are some specific types and forms of data that we should be aware of. We can use a few more functions here, str() for structure, and head() for the first few rows.\n\n\n\n\n\n\n\n\nThere are a bewildering number of formats for storing data and R is no exception. Understanding the basic building blocks that make up data types is essential. All functions in R require specific types of input data and the key to using functions is knowing how these types relate to each other. We‚Äôre going talk about a few of the most common.\n\n\nThe basic data format in R is a vector - a one-dimensional grouping of elements that have the same data type. These are all vectors and they are created with the c() function:\n\n\n\n\n\n\n\n\nThe four types of atomic vectors (think atoms that make up a molecule aka vector) are double (or numeric), integer, logical, and character. Each type has some useful properties and each helps define limits or constraints on the data. Basically, functions in R require a specific types of data, and won‚Äôt work without them.\n\n\n\n\n\n\nüì£ Common errors\n\n\n\nPlay around with these because beyond typing errors, one of the most common issues is data that is of the wrong structure or type. Get to know the basic building blocks!\n\n\n\n\n\nWe are likely familiar with a spreadsheet‚Ä¶which is a type of two-dimensional data. In R, the cool thing is that a collection of vectors is a data frame, which keeps columns as vectors of the same type of data. Just as in a spreadsheet, a column describes a variable and rows link observations between columns.\nLet‚Äôs look at our cscidat again.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüì£ Data frame constraints\n\n\n\nIn R, the only constraints required to make a data frame are:\n\nEach column contains the same type of data\nThe number of observations in each column is equal.\n\nThese are good practices to use in spreadsheets too!",
    "crumbs": [
      "Modules",
      "Data Wrangling"
    ]
  },
  {
    "objectID": "1-data-wrangling/index.html#installing-packages",
    "href": "1-data-wrangling/index.html#installing-packages",
    "title": "Data Wrangling",
    "section": "",
    "text": "The base install of R is quite powerful, but the universe of R programming is an amazing place, and there are are many thousands of packages available that provide functions we can use for all kinds of things. This diversity and flexibility is what makes R awesome (and sometimes frustrating!). Packages are the spellbooks we can download and install for use. There is so much to say about packages regarding finding them, using them, etc., but for now let‚Äôs focus just on the basics.\n\nCRAN: One of the reasons for R‚Äôs popularity is CRAN, The Comprehensive R Archive Network. This is where you download R and also where most will gain access to packages (there are other places, but that is for later). Not much else to say about this now other than to be aware of it. As of Fall 2025, there are +22,800 packages on CRAN!\n\nWhen a package gets installed, that means the source code is downloaded and put into your local computer R library. A default library location is set for you, so let‚Äôs download some packages!\nTry this in RStudio on your own by running the following code in the Console:\n\n# install packages from CRAN\ninstall.packages(\"tidyverse\")\ninstall.packages(\"janitor\")\ninstall.packages(\"sf\")\n\nOnce our Console returns back to the &gt; symbol and there is no red stop sign in the upper right hand corner of Rstudio, let‚Äôs see if the installation worked. Try the following in your console:\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(janitor)\n\n\n\n\n\n\nüì£ Packages\n\n\n\nWe only need to install packages once per R version, but we need to load packages every session before we can use them with the library() function.\n\n\nIf everything worked, hopefully we‚Äôll see something like below. Don‚Äôt worry if the version numbers are slightly different, these can change depending on the operating system and version of R you are using.",
    "crumbs": [
      "Modules",
      "Data Wrangling"
    ]
  },
  {
    "objectID": "1-data-wrangling/index.html#getting-help",
    "href": "1-data-wrangling/index.html#getting-help",
    "title": "Data Wrangling",
    "section": "",
    "text": "üì£ Important Note\n\n\n\nIf you only take one thing away from today, please make sure it is this: there are many, many options to get help from. Part of learning is sifting through, trying, failing, and trying again. Don‚Äôt be discouraged if something isn‚Äôt working, please reach out and leverage your R community!\n\n\nBeing able to find help and interpret that help is probably one of the most important skills for learning a new language. R is no different. Help on functions and packages can be accessed directly from R, can be found on CRAN and other official R resources, searched on Google, etc.\n\n\nGetting help from the console is straightforward and can be done numerous ways. Try some of the commands below and see what happens in RStudio. When you know the name of a function, use the console and type help(&lt;function&gt;) or ?&lt;function&gt;\n# Using the help command/shortcut\nhelp(\"print\") # Help on the print command\n?print # Help on the print command using the `?` shortcut\n\n# When you know the name of the package\nhelp(package = \"sf\") # Help on the package `dplyr`\n\n\n# Don't know the exact name or just part of it\napropos(\"print\") # Returns all available functions with \"print\" in the name\n\n??print # shortcut, but also searches demos and vignettes in a formatted page\n\nWhile the resources already mentioned are useful, often the quickest way is to just turn to Google (and now LLM).\nHowever, searching for ‚ÄúR‚Äù answers straight from Google can be challenging and still requires understanding what the question (or error) actually is. A few tips:\n\nWhen using search engines, always preface the search with ‚Äúr‚Äù or ‚Äú[R]‚Äù\nGet a sense of what sources are reliable\nTake note of the number of hits and date of a web page\nWhen in doubt, search with the exact error message (see here for details about warnings vs errors)\n\n\n\n\n\n\n\n Using LLMs\n\n\n\nUsing tools like ChatGPT can be helpful. Some models are better than others for R, but just a strong caution and general bit of advice.\nMake sure to understand each piece of code that you run when getting suggestions for code from LLMs. Sometimes it will be great, sometimes it will be very wrong, and many times it‚Äôs a combination of both.\nLearning to program requires repetition, both in success and in failure, and understanding why something breaks can be much more informative to learning than knowing something just works.",
    "crumbs": [
      "Modules",
      "Data Wrangling"
    ]
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#tying-it-all-together",
    "href": "4-tying-it-together/4-tying-it-together.html#tying-it-all-together",
    "title": "Tying it Together! ü™¢",
    "section": "Tying it all Together",
    "text": "Tying it all Together"
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#wrangling-to-workflow",
    "href": "4-tying-it-together/4-tying-it-together.html#wrangling-to-workflow",
    "title": "Tying it Together! ü™¢",
    "section": "Wrangling to Workflow",
    "text": "Wrangling to Workflow\n\n\nhopefully we now have an idea how to go from just wrangling‚Ä¶\nto workflows using re-useable tools!"
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#quarto",
    "href": "4-tying-it-together/4-tying-it-together.html#quarto",
    "title": "Tying it Together! ü™¢",
    "section": "Quarto",
    "text": "Quarto\n\nis a (relatively) new, open-source, scientific, and technical publishing system\naims to make the process of creating and collaborating dramatically better\n\n\nSubsequent slides are adapted from the excellent Quarto Dashboard workshop by Mine √áetinkaya-Rundel from posit::conf(2024)"
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#quarto-many-outputs",
    "href": "4-tying-it-together/4-tying-it-together.html#quarto-many-outputs",
    "title": "Tying it Together! ü™¢",
    "section": "Quarto ‚ûù many outputs",
    "text": "Quarto ‚ûù many outputs\nWith Quarto you can weave together narrative text and code to produce elegantly formatted output as documents, web pages, blog posts, books, and more‚Ä¶"
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#installing-quarto",
    "href": "4-tying-it-together/4-tying-it-together.html#installing-quarto",
    "title": "Tying it Together! ü™¢",
    "section": "Installing Quarto",
    "text": "Installing Quarto\nBest Approach:\n\nGo to the Quarto website and download!"
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#quarto-version",
    "href": "4-tying-it-together/4-tying-it-together.html#quarto-version",
    "title": "Tying it Together! ü™¢",
    "section": "Quarto version",
    "text": "Quarto version\n\n\n\n\n\n\nTip\n\n\nRun the following in your Terminal to find your Quarto version:\n\n\nTerminal\n\nquarto --version"
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#documents",
    "href": "4-tying-it-together/4-tying-it-together.html#documents",
    "title": "Tying it Together! ü™¢",
    "section": "Documents",
    "text": "Documents\n\nLots of options .pdf, .html, .docx\nEasiest to start with .html!\nWe can embed our code and figures with the text!\nClick ‚ÄúRender‚Äù = AutoMagically make a report!"
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#dashboards",
    "href": "4-tying-it-together/4-tying-it-together.html#dashboards",
    "title": "Tying it Together! ü™¢",
    "section": "Dashboards",
    "text": "Dashboards\nSince Quarto 1.4!"
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#olympic-games-dashboard---r",
    "href": "4-tying-it-together/4-tying-it-together.html#olympic-games-dashboard---r",
    "title": "Tying it Together! ü™¢",
    "section": "üç∞ Olympic Games dashboard - R",
    "text": "üç∞ Olympic Games dashboard - R\n\nüîó mine.quarto.pub/olympic-games-r"
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#notebook-dashboard",
    "href": "4-tying-it-together/4-tying-it-together.html#notebook-dashboard",
    "title": "Tying it Together! ü™¢",
    "section": "Notebook ‚ûù Dashboard",
    "text": "Notebook ‚ûù Dashboard\n\n\n\nolympicdash-r.qmd\n\n---\ntitle: \"Olympic Games\"\nformat: dashboard\n---\n\n# notebook content goes here..."
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#cards",
    "href": "4-tying-it-together/4-tying-it-together.html#cards",
    "title": "Tying it Together! ü™¢",
    "section": "Cards",
    "text": "Cards\nDashboards are composed of cards."
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#rows-and-columns",
    "href": "4-tying-it-together/4-tying-it-together.html#rows-and-columns",
    "title": "Tying it Together! ü™¢",
    "section": "Rows and columns",
    "text": "Rows and columns\nCards are arranged into rows and columns."
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#layouts",
    "href": "4-tying-it-together/4-tying-it-together.html#layouts",
    "title": "Tying it Together! ü™¢",
    "section": "Layouts",
    "text": "Layouts\nPages, tabsets, and sidebars allow for more advanced layouts."
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#step-by-step",
    "href": "4-tying-it-together/4-tying-it-together.html#step-by-step",
    "title": "Tying it Together! ü™¢",
    "section": "Step-by-step",
    "text": "Step-by-step\nLet‚Äôs make a dashboard, step-by-step"
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#step-1-format-dashboard",
    "href": "4-tying-it-together/4-tying-it-together.html#step-1-format-dashboard",
    "title": "Tying it Together! ü™¢",
    "section": "Step 1: format: dashboard",
    "text": "Step 1: format: dashboard\n\n\n\ndashboard-r.qmd\n\n---\ntitle: \"My first Quarto dashboard\"\nformat: dashboard\n---"
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#step-2-add-a-card",
    "href": "4-tying-it-together/4-tying-it-together.html#step-2-add-a-card",
    "title": "Tying it Together! ü™¢",
    "section": "Step 2: Add a card",
    "text": "Step 2: Add a card\n\n\n\ndashboard-r.qmd\n\n---\ntitle: \"My first Quarto dashboard\"\nformat: dashboard\n---\n\n```{r}\nlibrary(ggplot2)\n```\n\n```{r}\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point()\n```"
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#step-2-add-a-card-1",
    "href": "4-tying-it-together/4-tying-it-together.html#step-2-add-a-card-1",
    "title": "Tying it Together! ü™¢",
    "section": "Step 2: Add a card",
    "text": "Step 2: Add a card\n\n\n\n\n\ndashboard-r.qmd\n\n---\ntitle: \"My first Quarto dashboard\"\nformat: dashboard\n---\n\n```{r}\nlibrary(ggplot2)\n```\n\n```{r}\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point()\n```"
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#step-3-add-another-card",
    "href": "4-tying-it-together/4-tying-it-together.html#step-3-add-another-card",
    "title": "Tying it Together! ü™¢",
    "section": "Step 3: Add another card",
    "text": "Step 3: Add another card\n\n\n\ndashboard-r.qmd\n\n---\ntitle: \"My first Quarto dashboard\"\nformat: dashboard\n---\n\n```{r}\nlibrary(ggplot2)\n```\n\n```{r}\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point()\n```\n\n```{r}\nggplot(mpg, aes(x = drv)) +\n  geom_bar()\n```"
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#step-3-add-another-card-1",
    "href": "4-tying-it-together/4-tying-it-together.html#step-3-add-another-card-1",
    "title": "Tying it Together! ü™¢",
    "section": "Step 3: Add another card",
    "text": "Step 3: Add another card\n\n\n\n\n\ndashboard-r.qmd\n\n---\ntitle: \"My first Quarto dashboard\"\nformat: dashboard\n---\n\n```{r}\nlibrary(ggplot2)\n```\n\n```{r}\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point()\n```\n\n```{r}\nggplot(mpg, aes(x = drv)) +\n  geom_bar()\n```"
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#step-4-add-titles-to-cards",
    "href": "4-tying-it-together/4-tying-it-together.html#step-4-add-titles-to-cards",
    "title": "Tying it Together! ü™¢",
    "section": "Step 4: Add titles to cards",
    "text": "Step 4: Add titles to cards\n\n\n\ndashboard-r.qmd\n\n---\ntitle: \"My first Quarto dashboard\"\nformat: dashboard\n---\n\n```{r}\nlibrary(ggplot2)\n```\n\n```{r}\n#| title: Highway vs. city mileage\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point()\n```\n\n```{r}\n#| title: Drive types\nggplot(mpg, aes(x = drv)) +\n  geom_bar()\n```"
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#step-4-add-titles-to-cards-1",
    "href": "4-tying-it-together/4-tying-it-together.html#step-4-add-titles-to-cards-1",
    "title": "Tying it Together! ü™¢",
    "section": "Step 4: Add titles to cards",
    "text": "Step 4: Add titles to cards\n\n\n\n\n\ndashboard-r.qmd\n\n---\ntitle: \"My first Quarto dashboard\"\nformat: dashboard\n---\n\n```{r}\nlibrary(ggplot2)\n```\n\n```{r}\n#| title: Highway vs. city mileage\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point()\n```\n\n```{r}\n#| title: Drive types\nggplot(mpg, aes(x = drv)) +\n  geom_bar()\n```"
  },
  {
    "objectID": "4-tying-it-together/4-tying-it-together.html#steps-1---4",
    "href": "4-tying-it-together/4-tying-it-together.html#steps-1---4",
    "title": "Tying it Together! ü™¢",
    "section": "Steps 1 - 4",
    "text": "Steps 1 - 4"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Learning R: Workflow vs Wrangling",
    "section": "",
    "text": "üóì Oct 29, 2025\nüïò 1 pm - 5 pm",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#date-location",
    "href": "index.html#date-location",
    "title": "Learning R: Workflow vs Wrangling",
    "section": "",
    "text": "üóì Oct 29, 2025\nüïò 1 pm - 5 pm",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Learning R: Workflow vs Wrangling",
    "section": "Overview",
    "text": "Overview\nYou likely already wrangle, analyze, and report environmental data of all types. Perhaps you use R sometimes, or maybe never before. But certainly you likely do similar tasks over and over, maybe using the same tools (e.g., Excel), or maybe a number of different tools. Are your tools re-usable? Can you reproduce your work efficiently and easily, building on the previous experience?\nNo matter the answer to these questions, this workshop will try to get through some of the basic principles of data wrangling and summarizing in R, how to re-use these tools, and how to build a reproducible workflow you can use to tackle whatever data challenge gets thrown your way.\nWe will walk through how to get data into R, how to summarize, join, and plot our data, as well as how to make some basic maps. Finally, we will touch on how to put this into a single report that you can re-use or revise as you see fit.\nThis course is for you if you:\n\ndo data analysis in Excel\ndo anything with spreadsheets and environmental data\nuse a computer regularly\ngenerate summaries or reports that use environmental data\nhave used R before\nhave never used R before",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "Learning R: Workflow vs Wrangling",
    "section": "Schedule",
    "text": "Schedule\n\n\n\nTime\nActivity\n\n\n\n\n01:00 - 01:15\nGetting Started\n\n\n01:15 - 01:50\nData Wrangling & Project Workflow\n\n\n01:50 - 02:00\n‚òï Take a break ‚òï\n\n\n02:00 - 02:50\nAdventures with Bioassessment Data\n\n\n02:50 - 03:00\nüß† Brain break! üß†\n\n\n03:00 - 03:50\nMake a Map! üó∫Ô∏è\n\n\n03:50 - 04:00\n‚òï Coffee break ‚òï\n\n\n04:00 - 04:30\nTying it Together ü™¢\n\n\n04:30 - 05:00\nQ & A ü§®üìö",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#instructor",
    "href": "index.html#instructor",
    "title": "Learning R: Workflow vs Wrangling",
    "section": "Instructor",
    "text": "Instructor\nRyan Peek is Senior Environmental Scientist (Specialist) at California Department of Fish and Wildlife and reasearcher with UC Davis. Ryan prefers being outside in flowing water over most any other environment, and has worked in a wide range of environments and subject areas including biodiversity, climate change, drought, environmental monitoring, genomics, hydrology, aquatic ecology, food webs, conservation biology, and especially anything having to do with frogs.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#website",
    "href": "index.html#website",
    "title": "Learning R: Workflow vs Wrangling",
    "section": "Website",
    "text": "Website\nWebsite and slides, all built in Quarto with RStudio! Styles, Themes, and Layouts adapted/reused from the excellent posit::conf(2024) repo, specifically the Quarto Dashboard Workshop. Some fantastic resources exist that have been invaluable for learning how to put these types of workshops together, thanks to the open, available, and re-useable approach folks have taken. For Quarto Live / WASM, the excellent R Primers site by Andrew Heiss was invaluable.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#content",
    "href": "index.html#content",
    "title": "Learning R: Workflow vs Wrangling",
    "section": "Content",
    "text": "Content\nContent is largely built and adapted from the CABW 2018 R Training, and influenced by the excellent Carpentries workshops and community, Openscapes resources (including a Water Boards specific program), and the Davis R Users Group and R4WRDS course.\nUltimately, everything is and should be open to all for use, reuse, and learning.",
    "crumbs": [
      "Home"
    ]
  }
]